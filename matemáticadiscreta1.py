# -*- coding: utf-8 -*-
"""MatemáticaDiscreta1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/11xqCqURvO710NUo2p_-MxBQdh6PHS1EV
"""

def menu():
    while True:
        print("\n===== MENÚ PRINCIPAL =====")
        print("1. Simplificar expresiones usando leyes de conjuntos")
        print("2. Operaciones entre conjuntos")
        print("3. Conjuntos finitos y sus aplicaciones")
        print("4. Partición de un conjunto y sus aplicaciones")
        print("5. Relaciones: reflexividad, simetría y transitividad")
        print("6. Relaciones de equivalencia")
        print("7. Relación de orden parcial y conjuntos parcialmente ordenados")
        print("8. Funciones: inyecciones, sobreyecciones, bisecciones")
        print("9. Funciones: inversa y composición")
        print("0. Salir")

        opcion = input("\nElige una opción: ")

        if opcion == '1':
            simplificar_conjuntos()
        elif opcion == '2':
            operaciones_conjuntos()
        elif opcion == '3':
            conjuntos_finitos()
        elif opcion == '4':
            particion_conjuntos()
        elif opcion == '5':
            propiedades_relaciones()
        elif opcion == '6':
            relaciones_equivalencia()
        elif opcion == '7':
            orden_parcial()
        elif opcion == '8':
            funciones_tipo()
        elif opcion == '9':
            funciones_inversas_composicion()
        elif opcion == '0':
            print("Saliendo... \U0001F44B")
            break
        else:
            print("Opción inválida. Intenta otra vez.")


def simplificar_conjuntos():
    A = {1,2,3}
    B = {3,4,5}
    print(f"\nA = {A}")
    print(f"B = {B}")
    print("Simplificación: (A ∩ B) ∪ (A - B) = A")
    resultado = (A.intersection(B)).union(A.difference(B))
    print(f"Resultado: {resultado}")


def operaciones_conjuntos():
    X = {1, 2, 3}
    Y = {3, 4, 5}
    print(f"\nX = {X}")
    print(f"Y = {Y}")
    print(f"Unión: {X.union(Y)}")
    print(f"Intersección: {X.intersection(Y)}")
    print(f"Diferencia X - Y: {X.difference(Y)}")
    print(f"Diferencia simétrica: {X.symmetric_difference(Y)}")


def conjuntos_finitos():
    conjunto = {1, 2, 3, 4}
    print(f"\nConjunto finito: {conjunto}")
    print(f"Cantidad de elementos: {len(conjunto)}")


def particion_conjuntos():
    conjunto = {1, 2, 3, 4}
    particion = [{1,2}, {3,4}]
    print(f"\nConjunto: {conjunto}")
    print(f"Partición: {particion}")


def propiedades_relaciones():
    relacion = {(1,1), (2,2), (3,3)}
    print(f"\nRelación: {relacion}")
    print("Es reflexiva, simétrica y transitiva (relación de equivalencia).")


def relaciones_equivalencia():
    A = {1,2,3}
    relacion = {(1,1), (2,2), (3,3)}
    print(f"\nConjunto A: {A}")
    print(f"Relación de equivalencia: {relacion}")


def orden_parcial():
    conjunto = {1, 2, 3}
    orden = {(1,1), (2,2), (3,3), (1,2), (2,3)}
    print(f"\nConjunto: {conjunto}")
    print(f"Relación de orden parcial: {orden}")


def funciones_tipo():
    A = {1,2,3}
    B = {4,5,6}
    funcion = {(1,4), (2,5), (3,6)}
    print(f"\nFunción de A en B: {funcion}")
    print("Es inyectiva (cada elemento de A se conecta con uno distinto en B) y sobreyectiva (cubre todo B).")


def funciones_inversas_composicion():
    f = {(1,2), (2,3)}
    g = {(2,5), (3,7)}
    print(f"\nFunciones f: {f} y g: {g}")
    print("Composición g o f: {(1,5), (2,7)}")

if __name__ == "__main__":
    menu()